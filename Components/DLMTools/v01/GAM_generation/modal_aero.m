function [genAIC,A0,A1] = modal_aero(AIC,Phib_aero,Phif_fem,PhiCS_aero,tfa,S,D1,D2,Omega)
%% Generates modal AIC matrices
% The functions calculates the generalized aero matrices. It implements 
% equation-14 of the reference: 
% 'Kotikalpudi, Aditya, Harald Pfifer, and Gary J. Balas. "Unsteady 
% aerodynamics modeling for a flexible unmanned air vehicle." AIAA 
% Atmospheric Flight Mechanics Conference. 2015.'
%
% Inputs:
%   AIC: An NumPanels-by-NumPanels-by-NumOmega AIC matrix
%   Phibf: A (3*NumFEMNodes)-by-(NumRigidModes+NumFlexModes) matrix where
%           i-th column contains mode shape (rigid of flexible) containing 
%           Heave,Bend,Twist
%   PhiCS: (NumPanels*6)-by-NumCS matrix where i-th column contains the
%           control surface mode generated by deflection i-th control
%           surface by 1 rad. The column contains all 6-degrees of freedom
%   tfa: (2*NumPanels)-by-(3*NumFEMNodes) matrix which transforms
%           structural mode shapes consisting of heave, bend and twist to
%           aeordynamic panel mode shapes containing heave and twist of
%           aerodynamic panels
%   S: A (6*NumPanels)-by-NumPanels matrix where where blocks of six rows 
%           give the [Ax; Ay; Az; Mx; My; Mz] data.
%           Ax is the panel area projected perpendicular to the x-axis
%           Ay and Az are defined similarly.
%           Mx is th moment of the area about the x-axis. My and Mz are
%           defined similarly. 
%   D1,D2: Differentiation matrices used to relate heave and twist of
%           aerodynamic panel to normalwash
%   Omega: A 1-by-NumOmega vector containing reduced frequencies
%
% Outputs:
%   genAIC: A (NumRigidModes+NumFlexModes)-by-(NumRigidModes+NumFlexModes
%           +NumCS)-by-NumOmega matrix. genAIC(:,:,i) contains the 
%           generalized aerodyanmic matrix from i-th Omega. Refer Eq-14 in
%           the reference.
%   A0,A1: (NumRigidModes+NumFlexModes)-by-(NumRigidModes+NumFlexModes
%           +NumCS) matrices. There are the A0 and A1 matrices of the 
%           rational function approximation (Equation 16 of the reference).
%           NOTE: The calculation here is valid only for VLM based model
%           (where AIC is same for each Omega)

%% Obtain modal aerodynamics
NumPanels = size(AIC,1);
NumBModes = size(Phib_aero,2);
NumFModes = size(Phif_fem,2);
NumCSModes = size(PhiCS_aero,2);
NumOmega = length(Omega);

% Obtain the heave and pitch dof index
idx = sort([(1:NumPanels)*6-3, (1:size(AIC,1))*6-1]); 

Phif_aero = tfa*Phif_fem;

% Reduce the differentiation matrices from 6 to 2 DOF
D1Phi = D1*[Phib_aero Phif_aero PhiCS_aero];
D2Phi = D2*[Phib_aero Phif_aero PhiCS_aero];

% According to the reference above (section 5.3), a rigid body
% orientation or translation change does not affect the downwash
% directly. This is because the rigid body equations are in the body
% axis frame which doesn't deal with airflow directly.
% If, lets say, due to a control surface deflection, the angle of
% attack changes. This would reflect in a change in U and W, which
% would generate desired aerodynamic forces.
D1Phi(:,1:6) = zeros(size(D1Phi,1),6); 

genAIC = zeros(NumBModes+NumFModes,NumBModes+NumFModes+NumCSModes,NumOmega);
for ii = 1:length(Omega)
    genAIC(:,:,ii) = [Phib_aero'; Phif_aero']*S*AIC(:,:,ii)* ...
        (D1Phi + sqrt(-1)*Omega(ii)*D2Phi);    
end

%% Rational function approximation for VLM only
% Note: This code assumes AIC is constant and would be used for VLM only.
% For a constant AIC, find A0 and A1 matrices of the rational function
% approximation (Equation 16 of the reference)
L = [Phib_aero'; Phif_aero']*S*AIC(:,:,1);
A0 = L*D1Phi;
A1 = L*D2Phi;